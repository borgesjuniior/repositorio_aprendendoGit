
git init // comando para iniciar o repositorio
git status // comando para saber como está o estado atual 
git log // mostra dados do commit atual
git add  {arquivo} //adiciona a staging area
git add .       //adiciona todos os arquivos a staging area 
git commit      // adiciona o arquivo ao repositorio
git commit -m  // permite adiciona uma mensagem ao commit
git diff        // ele permite ver as alterações que foram feitas. 
git diff --stages // diferenças entre a staged e o repository
git log --name-status // mostra todos os arquivos modificados no log dos commit
git diff {commit} // mostra as modificacoes que foram feitas do commit para o atual. (preciso só digitar as primeiras 8 letras)
git diff {commit} {commit} // mostra as modificacoes que foram feitas entre os commit
git diff -w         // removendo espaços

rm {file} //remove o arquivo para a staging area
git rm {file} //remove o arquivo para o repository
git add --all  //adiciona todos os arquivos até os removidos.
git add -A     //adiciona todos os arquivos até os removidos.

rm -r {directory} // para remover um diretorio
git rm -r {directory} // para remover um diretorio ja do staging area
add -f {file}  // para forçar adicionar um arquivo 
git rm -rf {directory} --cached // remove os arquivos da staging area sem remover o arquivo localmente
git rm -rf // remove todos os arquivos da staging area

git commit -a -m "message" // ele commit direto sem precisar adicionar na staging area
git commit -am "message" // ele commit direto sem precisar adicionar na staging area
git commit -m  "message" --amend //ele sobrescreverá o ultimo commit

git config --global core.excludesfile // para indicar um .gitignore global da sua maquina. 
git config --global core.editor         // para por o editor
git log --pretty=oneline  //ele tras o log em uma linha
git log --abrev-commit      //ele reduz o nome do commit pra trazer só os primeiros 7 caracteres
git log --stat              //ele da mais dados sobre o commit
git log -p -3                 //ele mostra a alteração toda
git log --pretty=format:"%h - %an, %ar : %s"

git branch              // mostra todas as branch
git branch {nome}       // cria nova branch
git checkout {nome}     // muda entre as branch
git merge {branch}      // junta as branch
git checkout -b {nome}  // cria a branch e muda pra ela
git checkout {branch} -b {nome} //cria uma branch baseada em outra branch e muda pra ela
git checkout {commit} -b {nome} //cria uma branch baseada em um commit e muda pra ele
git checkout {nome commit} //volta para o commit anterior

git branch -m {novo nome}  // muda o nome da branch
git branch -D {nome}    // remove a branch, pode remover varias branch
git checkout --orphan {nome}  // cria uma branch vazia limpa
git checkout {nome}  // nome do arquivo ele volta as alterações


git remote -v // mostra o caminho do repository
git remote add {local} {repository} //mostra o repositorio 
git init --bare


git push <origin> <branch>  // sobe uma branch para um repositorio
git clone {repositorio}  // busca um repositorio ja criado
git pull <origin> <branch>  // buscar as atualizações do repositorio
git push origin <branch> -- delete // deleta a branch
git push origin :<branch>  // deleta a branch

git merge --abort //desfazer o merge
git remote -v
git remote set-url <origin> {url}

git stach  //cria uma stach
git stash list // lista as stach
git stash apply // puxa uma stash
git stach drop {nome}  // deleta uma stash
git stach pop  // busca a stach

-f // força uma ação
-r // diretorio
-A // tudo



touch  // cria arquivos
mkdir //cria diretorios

Log personalizado comandos
%H  //commit hash
%h  // abbreviated commit hash
%T  // Tree hash
%t  // arvore abreviada hash
%P  // hashes filhas
%p  // abreviada hashes filhas
%s  // titulo do commit
%an // nome do autor
%ae // autor email
%ad // autor data
%ar // autor data, relativo
%cn // committer nome
%ce // committer email
%cd // committer date
%cr // committer date, relative



